<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sean Helvey</title>
    <description>My first word was cheese
</description>
    <link>http://seanhelvey.com/</link>
    <atom:link href="http://seanhelvey.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 11 Mar 2018 09:39:38 -0600</pubDate>
    <lastBuildDate>Sun, 11 Mar 2018 09:39:38 -0600</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Ejected create-react-app not working on Heroku</title>
        <description>&lt;p&gt;This post is for everyone learning React out there. Weekend warriors, boot campers, and autodidacts.. I’m here for you! They told you not to do it, but you did it anyway.&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;http://carhumor.net/wp-content/uploads/2012/10/car-humor-funny-traffic-sign-one-way.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;oneway&quot; class=&quot; lazyloaded&quot; src=&quot;http://carhumor.net/wp-content/uploads/2012/10/car-humor-funny-traffic-sign-one-way.jpg&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Note: this is a one-way operation.
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;You used create-react-app followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run eject&lt;/code&gt; and now your app doesn’t work on Heroku. You google and find that the maintainers of create-react-app have no answers for you. Can you blame them? They are busy! So here we go:&lt;/p&gt;

&lt;h3 id=&quot;make-sure-you-are-running-the-right-build-pack&quot;&gt;Make sure you are running the right build pack&lt;/h3&gt;
&lt;p&gt;If you have already deployed your app created with create-react-app to Heroku, you are probably using the create-react-app-buildpack. After ejecting, you will need to remove that buildpack and add the heroku/nodejs buildpack instead.&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/buildpacks.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;buildpacks&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/buildpacks.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Heroku &amp;gt; App &amp;gt; Settings &amp;gt; Buildpacks
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;update-your-procfile&quot;&gt;Update your Procfile&lt;/h3&gt;
&lt;p&gt;This one is tricky because the create-react-app maintainers don’t have the time to debug this Heroku issue for you. Also, they told you not to eject!&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;https://media.giphy.com/media/JGF7ctowtLGak/giphy.gif&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;eject&quot; class=&quot; lazyloaded&quot; src=&quot;https://media.giphy.com/media/JGF7ctowtLGak/giphy.gif&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Once you eject, you can’t go back!
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;But you did. So you need to update your procfile to something like &lt;code class=&quot;highlighter-rouge&quot;&gt;web: node scripts/start.js&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;web: react-scripts start&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/procfile.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;procfile&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/procfile.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Update your Procfile
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;That should do it. Don’t forget to take a look at your GitHub repo along the way and make sure your most recent changes made it up there. That may sound obvious, but it is something that can easily be overlooked in the heat of the moment. Hope this helps!&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 -0700</pubDate>
        <link>http://seanhelvey.com/ejected-create-react-app-not-working-on-heroku/</link>
        <guid isPermaLink="true">http://seanhelvey.com/ejected-create-react-app-not-working-on-heroku/</guid>
        
        
      </item>
    
      <item>
        <title>Elm in React Part #3</title>
        <description>&lt;p&gt;This is a follow-up to &lt;a href=&quot;http://www.seanhelvey.com/elm-in-react-part-2/&quot;&gt;Elm in React Part #2&lt;/a&gt;. We have replaced the “add todo” form view of a React todo list app with Elm, but we still need model and update functions as part of The Elm Architecture. We also need ports to communicate with JavaScript or React in this case. Checkout the Elm branch of &lt;a href=&quot;https://github.com/seanhelvey/react-intro-exercise&quot;&gt;this todo list repo&lt;/a&gt; if you want to follow along. Here are the remaining steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a Html.program following the &lt;a href=&quot;https://github.com/evancz/react-elm-components/blob/master/example/Chat.elm&quot;&gt;react-elm-components&lt;/a&gt; example&lt;/li&gt;
  &lt;li&gt;Wire-up view to produce a message and display the updated model&lt;/li&gt;
  &lt;li&gt;Use ports to send messages to JavaScript / React&lt;/li&gt;
  &lt;li&gt;Subscribe to the port in your JavaScript / React&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;“When the user clicks on a button, it produces a message. That message is piped into the update function, producing a new model. We use the view function to show the new model on screen. And then we just repeat this forever!” - Evan Czaplicki&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;step-1----create-a-htmlprogram&quot;&gt;Step 1 -  Create a Html.program&lt;/h3&gt;
&lt;p&gt;Take a good look at the &lt;a href=&quot;https://github.com/evancz/react-elm-components/blob/master/example/Chat.elm&quot;&gt;react-elm-components&lt;/a&gt; example and think about how you can solve this problem using The Elm Architecture. I decided that our model could simply be the &lt;code class=&quot;highlighter-rouge&quot;&gt;Input String&lt;/code&gt; portion of the model used in the example.&lt;/p&gt;

&lt;h4 id=&quot;model&quot;&gt;Model&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type alias Model =
    { input : String }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Msg and update function could be very similar too. We can still have an &lt;code class=&quot;highlighter-rouge&quot;&gt;Input&lt;/code&gt; case for user input, and we can use the Msg &lt;code class=&quot;highlighter-rouge&quot;&gt;Submit&lt;/code&gt; instead of send.&lt;/p&gt;

&lt;h4 id=&quot;msg&quot;&gt;Msg&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Msg
    = Submit
    | Input String
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;update&quot;&gt;Update&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        Submit -&amp;gt;
            let
                oldInput =
                    model.input
            in
                ( { model | input = &quot;&quot; }
                , submit oldInput
                )

        Input newInput -&amp;gt;
            ( { model | input = newInput }
            , Cmd.none
            )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What is lowercase “submit” where it says &lt;code class=&quot;highlighter-rouge&quot;&gt;submit oldInput&lt;/code&gt; in the snippet above? That is our port, which we will discuss next. Feel free to replace it with &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd.none&lt;/code&gt; temporarily and allow the compiler to guide you the rest of the way.&lt;/p&gt;

&lt;p&gt;There is a certain amount of pain and pleasure that we experience using a compiled language. It takes patience and practice in order to become comfortable with the process. Try to have some fun exploring this! Don’t forget that &lt;a href=&quot;https://github.com/seanhelvey/react-intro-exercise&quot;&gt;this todo list repo&lt;/a&gt; has my solution in the Elm branch.&lt;/p&gt;

&lt;h3 id=&quot;step-2---wire-up-view&quot;&gt;Step 2 - Wire-up view&lt;/h3&gt;
&lt;p&gt;We will now wire-up the view to produce a message and display the updated model. Remember our stub view from &lt;a href=&quot;http://www.seanhelvey.com/elm-in-react-part-2/&quot;&gt;Elm in React Part #2&lt;/a&gt;?&lt;/p&gt;

&lt;h4 id=&quot;our-stub-view-function&quot;&gt;Our stub view function&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;port module AddCardForm exposing (main)

import Html exposing (text, form, input, label, fieldset)
import Html.Attributes exposing (attribute, id, class)


main =
    form [ class &quot;well&quot; ]
        [ fieldset [ class &quot;form-group&quot; ]
            [ label [ attribute &quot;htmlFor&quot; &quot;title&quot; ]
                [ text &quot;Title&quot; ]
            , input [ class &quot;form-control&quot;, id &quot;title&quot; ] []
            ]
        ]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s make it so that when a user clicks on a button, it produces a message. Once that message has been piped into the update function, we will use the view function to show the new model on screen.&lt;/p&gt;

&lt;h4 id=&quot;the-completed-view-function&quot;&gt;The completed view function&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;view : Model -&amp;gt; Html Msg
view model =
    let
        options =
            { stopPropagation = False, preventDefault = True }
    in
        form [ class &quot;well&quot;, onWithOptions &quot;submit&quot; options (Json.succeed Submit) ]
            [ fieldset [ class &quot;form-group&quot; ]
                [ label [ attribute &quot;htmlFor&quot; &quot;title&quot; ]
                    [ text &quot;Title&quot; ]
                , input [ class &quot;form-control&quot;, value model.input, id &quot;title&quot;, onInput Input ] []
                ]
            ]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-3---use-ports-to-communicate-with-javascript--react&quot;&gt;Step 3 - Use ports to communicate with JavaScript / React&lt;/h3&gt;
&lt;p&gt;To use Elm ports, we need the keyword “port” in front of our module declaration at the top of the file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;port module AddCardForm exposing (main)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we add a port for sending Strings out to JavaScript or React.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;port submit : String -&amp;gt; Cmd msg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It could be a different type such as &lt;code class=&quot;highlighter-rouge&quot;&gt;List Float&lt;/code&gt;. &lt;a href=&quot;https://github.com/seanhelvey/valunicorn/blob/master/src/Calculator.elm&quot;&gt;Here is an example&lt;/a&gt; of a port sending a &lt;code class=&quot;highlighter-rouge&quot;&gt;List Float&lt;/code&gt; to JavaScript.&lt;/p&gt;

&lt;h3 id=&quot;step-4---subscribe-to-the-port-from-javascript--react&quot;&gt;Step 4 - Subscribe to the port from JavaScript / React&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/evancz/react-elm-components/blob/master/example/Chat.elm&quot;&gt;react-elm-components&lt;/a&gt; library allows us to very simply wire up ports with our React component in the following way:&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/addPortsReact.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;addPortsReact&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/addPortsReact.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    We are done!
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;So this is the end of our three part series of blog posts on “Elm in React”. I learned a ton going through this and would appreciate any feedback you have. Hopefully it helps someone gradually incorporate Elm into an existing JavaScript or React application. Thanks for tuning in!&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Feb 2018 00:00:00 -0700</pubDate>
        <link>http://seanhelvey.com/elm-in-react-part-3/</link>
        <guid isPermaLink="true">http://seanhelvey.com/elm-in-react-part-3/</guid>
        
        
      </item>
    
      <item>
        <title>Elm in React Part #2</title>
        <description>&lt;p&gt;This is a follow-up to &lt;a href=&quot;http://www.seanhelvey.com/elm-in-react-part-1/&quot;&gt;Elm in React Part #1&lt;/a&gt;. In the first post we replaced the “add todo” form portion of a React todo list app with “hello world” written in Elm. Now we will replace the Elm “hello world” stub with an Elm view. Checkout the Elm branch of &lt;a href=&quot;https://github.com/seanhelvey/react-intro-exercise&quot;&gt;this todo list repo&lt;/a&gt; if you want to follow along. In plain English these are the steps I took:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Surrender to the Elm Architecture&lt;/li&gt;
  &lt;li&gt;Try to translate the view from JSX to Elm&lt;/li&gt;
  &lt;li&gt;Follow the friendly compiler error messages&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/todo.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;todo&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/todo.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    A simple todo list
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-1----surrender-to-the-elm-architecture&quot;&gt;Step 1 -  Surrender to the Elm Architecture&lt;/h3&gt;
&lt;p&gt;Don’t fight or resist it! If you really are porting a React app, you are probably stuck thinking about props, state, and event handlers. In some ways writing an Elm application from scratch is easier than translating existing JavaScript or React. For me, the mental shift back to Elm from React was tough, but it was an amazing learning experience.&lt;/p&gt;

&lt;p&gt;One trick I’ve learned trying to teach Elm over the last couple of months is that you can start with a simple view before diving into model and update. I know this might go against other conventional Elm wisdom and I am open to feedback, but something like this here below can be a nice small step toward Elmy goodness IMHO.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;port module AddCardForm exposing (main)

import Html exposing (text, form, input, label, fieldset)
import Html.Attributes exposing (attribute, id, class)


main =
    form [ class &quot;well&quot; ]
        [ fieldset [ class &quot;form-group&quot; ]
            [ label [ attribute &quot;htmlFor&quot; &quot;title&quot; ]
                [ text &quot;Title&quot; ]
            , input [ class &quot;form-control&quot;, id &quot;title&quot; ] []
            ]
        ]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It compiles and looks exactly like it did in the React / JSX version! Now we can add functionality to this view, which will require that we finish building out a model and update function.&lt;/p&gt;

&lt;h3 id=&quot;step-2---try-to-translate-the-view-from-jsx-to-elm&quot;&gt;Step 2 - Try to translate the view from JSX to Elm&lt;/h3&gt;
&lt;p&gt;You can see the finished Elm view and the React / JSX code we replaced in this diff below. The thing is that the awesome Elm compiler will ensure that you have a model and update function before you are really able to “finish” this part of the Elm application. We will cover that next in Part #3. So while you may glance at the diff here below, know that you need to flush out the rest of the Elm Architecture before “wiring up” the view. If these diffs or snippets become confusing, please take a look at the finished Elm branch of this repo &lt;a href=&quot;https://github.com/seanhelvey/react-intro-exercise/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/viewDiff.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;viewDiff&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/viewDiff.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    A google search will lead you to many tools which can help you easily translate HTML or JSX to Elm. You can start there, and then make little tweaks as you see fit. If you have any trouble with elm-format, take a look at this &lt;a href=&quot;https://github.com/avh4/elm-format/issues/408&quot; target=&quot;_blank&quot;&gt;GitHub Issue&lt;/a&gt; for guidance.
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-3---follow-the-friendly-compiler-error-messages&quot;&gt;Step 3 - Follow the friendly compiler error messages&lt;/h3&gt;
&lt;p&gt;If you have surrendered to The Elm Architecture (step #1) and tried translating the view from JSX to Elm (step #2) then you should be able to follow the friendly compiler error messages (step #3) as they shepherd you through any confusion from the Elm guide, docs, or other code samples and blog posts you are referring to. In &lt;a href=&quot;http://www.seanhelvey.com/elm-in-react-part-3/&quot;&gt;the next post&lt;/a&gt; we will illustrate how to do this using the model and update functions along with ports to finish the “add todo” functionality.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Feb 2018 00:00:00 -0700</pubDate>
        <link>http://seanhelvey.com/elm-in-react-part-2/</link>
        <guid isPermaLink="true">http://seanhelvey.com/elm-in-react-part-2/</guid>
        
        
      </item>
    
      <item>
        <title>Elm in React Part #1</title>
        <description>&lt;p&gt;This post will expand upon &lt;a href=&quot;http://elm-lang.org/blog/how-to-use-elm-at-work&quot;&gt;Evan’s post&lt;/a&gt; describing how to use Elm with React. I’ve been using &lt;a href=&quot;https://github.com/seanhelvey/react-intro-exercise&quot;&gt;this todo list example&lt;/a&gt; to teach react for a while now (thanks &lt;a href=&quot;https://twitter.com/chadwithuhc&quot;&gt;Chad&lt;/a&gt;!) so I thought it would make sense to use the same example here. Checkout the Elm branch of the todo list repo linked above if you want to follow along. You can see the whole commit diff for this blog post &lt;a href=&quot;https://github.com/seanhelvey/react-intro-exercise/commit/2fcb2ddb9db4b3bb655312a4df1b5dc2d1c88a6d&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need to do a few things to add Elm into our react app:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Npm install &lt;code class=&quot;highlighter-rouge&quot;&gt;elm-webpack-loader&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;react-elm-components&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Update Webpack config&lt;/li&gt;
  &lt;li&gt;Install Elm packages (and add elm-stuff to .gitignore)&lt;/li&gt;
  &lt;li&gt;Replace React component with Elm&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/todo.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;todo&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/todo.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    A simple todo list
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-1---npm-install&quot;&gt;Step 1 - Npm install&lt;/h3&gt;
&lt;p&gt;Step one above doesn’t need explaining, but I’ll describe steps 2-4 in more detail.&lt;/p&gt;

&lt;h3 id=&quot;step-2---update-webpack-config&quot;&gt;Step 2 - Update Webpack config&lt;/h3&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/webpack.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;webpack&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/webpack.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Add the elm-webpack-loader and noParse lines. Note that the syntax has changed so that we must specify &quot;elm-webpack-loader&quot; rather than just &quot;elm-webpack&quot; as Evan and Richard had in their example.
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-3---install-elm-packages&quot;&gt;Step 3 - Install Elm packages&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://guide.elm-lang.org/install.html&quot;&gt;Install elm&lt;/a&gt; if you haven’t already, and then run the following two commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elm-package install elm-lang/core
elm-package install elm-lang/html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will want to add &lt;code class=&quot;highlighter-rouge&quot;&gt;elm-stuff&lt;/code&gt; to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; at this point.&lt;/p&gt;

&lt;h3 id=&quot;step-4---replace-react-component-with-elm&quot;&gt;Step 4 - Replace React component with Elm&lt;/h3&gt;
&lt;p&gt;Now we can easily replace the React component in our &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file with Elm:&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/app.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;app&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/app.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Replace the React component in `app.js` with Elm
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/addCard.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;addCard&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/addCard.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Our Elm file is hello world for now
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;We will replace the react view with Elm in &lt;a href=&quot;http://www.seanhelvey.com/elm-in-react-part-2/&quot;&gt;part #2&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Feb 2018 00:00:00 -0700</pubDate>
        <link>http://seanhelvey.com/elm-in-react-part-1/</link>
        <guid isPermaLink="true">http://seanhelvey.com/elm-in-react-part-1/</guid>
        
        
      </item>
    
      <item>
        <title>Nested React Routes in v4</title>
        <description>&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;component&lt;/code&gt; in React Router v4 works for plain old child components, but not when your child component is a nested &lt;code class=&quot;highlighter-rouge&quot;&gt;Route&lt;/code&gt;. In &lt;a href=&quot;https://github.com/seanhelvey/react-router-quickstart-nested-routes/&quot;&gt;this example&lt;/a&gt; I’ve taken the react router quickstart tweaked it to pass props into a wrapped route.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
const WrappedRoute = (props) =&amp;gt; {
  console.log(&quot;WrappedRoute props&quot;, props)
  return(
    &amp;lt;div&amp;gt;
      &amp;lt;h3&amp;gt;{props.yo()}&amp;lt;/h3&amp;gt;
      &amp;lt;Route path={`${props.match.path}/:topicId`} render={Topic}/&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

&amp;lt;WrappedRoute yo={() =&amp;gt; &quot;yo&quot;} {...props}&amp;gt;&amp;lt;/WrappedRoute&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please &lt;a href=&quot;https://twitter.com/seanhelvey&quot;&gt;Let me know&lt;/a&gt; if you disagree with this approach or have a better alternative. Hope this helps!&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Jan 2018 00:00:00 -0700</pubDate>
        <link>http://seanhelvey.com/nested-react-router-v4/</link>
        <guid isPermaLink="true">http://seanhelvey.com/nested-react-router-v4/</guid>
        
        
      </item>
    
      <item>
        <title>Elm Events in Colorado</title>
        <description>&lt;p&gt;December Elm Hack Night has been cancelled, but Wednesday January 24th is &lt;a href=&quot;https://www.meetup.com/Front-range-elm/events/245365431/&quot;&gt;Beginner’s Night&lt;/a&gt; at Front Range Elm. Please spread the word and bring your friends!&lt;/p&gt;

&lt;p&gt;Here are some other Elm events happening in CO over the coming months:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;12/4 6:30p &lt;a href=&quot;https://www.meetup.com/NoCo-JavaScript-Meetup/events/243653786&quot;&gt;NoCo JS&lt;/a&gt; - “What the Elm?” - &lt;a href=&quot;https://github.com/seanhelvey/what-the-elm&quot;&gt;Slides / Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;1/23 6:00p &lt;a href=&quot;https://www.meetup.com/DenverScript/events/244717323/&quot;&gt;DenverScript&lt;/a&gt; - Similar deck, maybe more of an emphasis on types&lt;/li&gt;
  &lt;li&gt;1/25 &lt;a href=&quot;https://www.meetup.com/denverfp/events/fzhgnnyxcbhc/&quot;&gt;Denver FP&lt;/a&gt; - Not confirmed, but I am proposing 2-3 people give 15-20m talks longer than lightning but more focused than a big 60m presentation. Please reach out of you are interested!&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 24 Nov 2017 00:00:00 -0700</pubDate>
        <link>http://seanhelvey.com/elm-events-in-colorado/</link>
        <guid isPermaLink="true">http://seanhelvey.com/elm-events-in-colorado/</guid>
        
        
      </item>
    
      <item>
        <title>Tips From a FP Noob</title>
        <description>&lt;p&gt;Functional programming is amazing! Huge thanks to the professors, colleagues, and friends who have helped me appreciate that. In this post I will humbly share four tips I’ve picked up along the way:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Play with a passion project&lt;/li&gt;
  &lt;li&gt;Ask the right questions&lt;/li&gt;
  &lt;li&gt;Really read the docs&lt;/li&gt;
  &lt;li&gt;Give back to the community&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;http://knowyourmeme.com/photos/969154-you-either-die-a-hero-or-you-live-long-enough-to-see-yourself-become-the-villain&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Noob gif&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2017/noob.jpg&quot; /&gt;
    &lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;play-with-a-passion-project&quot;&gt;Play with a passion project&lt;/h2&gt;
&lt;p&gt;Do it! Scratch your own itch. Save the world. Whatever. Just start building &lt;em&gt;something&lt;/em&gt;. I personally tend to get bogged down working through a book of exercises and that has been a huge challenge for me while trying to learn Haskell. I’ve had better success with Elm, because I created &lt;a href=&quot;http://www.valunicorn.me/&quot;&gt;a calculator&lt;/a&gt; that I can actually see and use.&lt;/p&gt;

&lt;h2 id=&quot;ask-the-right-questions&quot;&gt;Ask the right questions&lt;/h2&gt;
&lt;p&gt;If you roll into a Slack channel and say that your precious calculator is broken, nobody is going to hear you. I’ve found that thinking in terms of higher order functions such as map and fold will help not only when communicating with other programmers, but especially when trying to answer your own questions.&lt;/p&gt;

&lt;p&gt;For me over the last couple of months, it has looked something like this:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Q: “Is there a higher order function to generate a series of values from an initial value?”  &lt;br /&gt;
A: “Yes. Unfold.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q: “I’m looking for a function like fold that returns all of the intermediate values almost like map.”  &lt;br /&gt;
A: “Try scanl.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Think of it like traveling somewhere and attempting to say one or two words in the local tongue. People will generally give you the benefit of the doubt if you make the effort, even when you don’t exactly know what you are talking about.&lt;/p&gt;

&lt;h2 id=&quot;really-read-the-docs&quot;&gt;Really read the docs&lt;/h2&gt;
&lt;p&gt;In both of the prior examples, I could have avoided asking for help entirely if I had really read the docs. The answers are right there. Don’t be too hard on yourself, though. Learning how to read function signatures can be challenging. Chip away at the docs over time knowing that the answer is there. You will definitely pick up some other goodies along the way.&lt;/p&gt;

&lt;h2 id=&quot;give-back-to-the-community&quot;&gt;Give back to the community&lt;/h2&gt;
&lt;p&gt;I cannot tell you how grateful I am for the incredible community of functional programmers. Do not be afraid of your zealot co-worker who tells you that Haskell is better than Python and they can prove it (hi &lt;a href=&quot;https://twitter.com/puffnfresh&quot;&gt;@puffnfresh&lt;/a&gt;). They are trying to help you! Let’s be honest - the terminology and pretense around functional programming can be off-putting to some beginners. It’s ok.&lt;/p&gt;

&lt;p&gt;Soon you will find that the functional programming community is unbelievably generous and friendly. They are organizing conferences, teaching free classes, writing blog posts, and helping beginners in Slack channels. These people are legitimately trying to make the world a better place. The least that we can do as beginners is attempt to give back in the same way.&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Oct 2017 00:00:00 -0600</pubDate>
        <link>http://seanhelvey.com/tips-from-a-fp-noob/</link>
        <guid isPermaLink="true">http://seanhelvey.com/tips-from-a-fp-noob/</guid>
        
        
      </item>
    
      <item>
        <title>Go is Not Python</title>
        <description>&lt;p&gt;You know Python fairly well, but your manger wants to start using Go “because it is faster”. Being the overacheiver that you are, you sacrifice time from your precious weekend to figure out the basics. Take a trivial Python program like this for instance:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def main():

  students = [
    {
      &quot;name&quot;: &quot;fred&quot;
    },
    {
      &quot;name&quot;: &quot;karen&quot;
    }
  ]

  for student in students:
    if student['name'] == &quot;fred&quot;:
      fred = student

  print fred['name']

if __name__=='__main__':
  main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What is the output of that program?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; python for_loop.py
&amp;gt;&amp;gt; fred
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fred! Of course. An if statement, a for loop. Let’s port it to go:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;students&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fred&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;karen&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fredPtr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fredPtr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;students&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fred&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;fredPtr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fredPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What is the output of that program?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; go run for-loop.go 
&amp;gt;&amp;gt; karen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;width: 410px&quot; class=&quot;wp-caption alignnone&quot;&gt;
  &lt;a href=&quot;https://media1.giphy.com/media/ma7VlDSlty3EA/giphy.gif&quot;&gt;&lt;img alt=&quot;Confused&quot; src=&quot;https://media1.giphy.com/media/ma7VlDSlty3EA/giphy.gif&quot; height=&quot;224&quot; /&gt;&lt;/a&gt;
  
  &lt;p class=&quot;wp-caption-text&quot;&gt;
    Huh?
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I’ve used a funny gif here to get my point across, but the impact of this misunderstanding can be severe. The value property of range (stored here as student) is a copy of the value from students, not a pointer to the value in students. See &lt;a href=&quot;https://github.com/golang/go/wiki/Range#gotchas&quot;&gt;golang Range Gotchas on GitHub&lt;/a&gt; and &lt;a href=&quot;https://tour.golang.org/moretypes/16&quot;&gt;A Tour of Go - Range&lt;/a&gt; for more info.&lt;/p&gt;

&lt;div style=&quot;width: 800px&quot; class=&quot;wp-caption alignnone&quot;&gt;
  &lt;a href=&quot;/assets/images/seanhelvey/2017/GolangRange1.png&quot;&gt;&lt;img alt=&quot;Confused&quot; src=&quot;/assets/images/seanhelvey/2017/GolangRange1.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div style=&quot;width: 800px&quot; class=&quot;wp-caption alignnone&quot;&gt;
  &lt;a href=&quot;/assets/images/seanhelvey/2017/GolangRange2.png&quot;&gt;&lt;img alt=&quot;Confused&quot; src=&quot;/assets/images/seanhelvey/2017/GolangRange2.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;The solution: we have to store a pointer to the value in students, rather than a pointer to the copy of the value from students.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;students&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fred&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;karen&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fredPtr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fredPtr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;students&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fred&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;fredPtr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fredPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I’ve seen serious bugs in production written by bright Python developers because of this misunderstanding. Go is not Python!&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Jun 2017 00:00:00 -0600</pubDate>
        <link>http://seanhelvey.com/go-is-not-python/</link>
        <guid isPermaLink="true">http://seanhelvey.com/go-is-not-python/</guid>
        
        
      </item>
    
      <item>
        <title>Calling All Landlocked Surfers</title>
        <description>&lt;p&gt;Over the last couple of years I’ve been blessed with amazing surfing experiences. I’ve ridden waves from Spain to Hawaii, Mexico, and home in California. As I have gotten older though, many of my friends have stopped surfing for various reasons (work, family, injuries, etc.). Living in Colorado has changed the dynamic quite a bit too. I need to make more of an effort to organize surf travel with friends.&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2017/Landlocked.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;EC2 Instances&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2017/Landlocked.jpg&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Are you a landlocked surfer?
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;This is a call to all landlocked surfers and those in need of adventure. We might be friends, friends of friends, or future friends. We might not even really like each other. Let’s come together and organize a few surf trips! I’m happy to meet random people along the way, but I know there are plenty of people in my extended network that are jonesin for surf travel.&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2017/encino.gif&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;EC2 Instances&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2017/encino.gif&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    If you're edged 'cause I'm weazin all your grindage, just chill.
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Please share this and help me spread the word. If you know a lonely surfer like me who wants to spend a week somewhere shredding the gnar, I’d love an introduction.&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Feb 2017 00:00:00 -0700</pubDate>
        <link>http://seanhelvey.com/calling-all-landlocked-surfers/</link>
        <guid isPermaLink="true">http://seanhelvey.com/calling-all-landlocked-surfers/</guid>
        
        
      </item>
    
      <item>
        <title>5 Reasons Interest Rates Are Rising</title>
        <description>&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2016/11/mr_toads_wild_ride_pin005.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Wild Ride&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2016/11/mr_toads_wild_ride_pin005.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Money in the bank or under the mattress, it turns out, may not be that safe after all.
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Mr. Toad’s Wild Ride is one of the few remaining original attractions at Disneyland Park. It is a wild adventure full of mayhem and havoc. Heading into this new era of economic policy feels like one of the ride’s hallmark hairpin turns. Unpredictable policy, deficit spending, and reduced foreign demand for treasuries are causing interest rates to increase. An increase in borrowing costs and a higher return on cash will prolong the rise in interest rates by slowing the economy and reducing income tax revenue. A quick tour of Mr. Trump’s Wild Ride leads me to the conclusion that interest rates are rising because of these five simple reasons.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;unpredictable-policy&quot;&gt;Unpredictable policy&lt;/h3&gt;
&lt;p&gt;Uncertainty in the markets takes the form of volatility, which has a negative correlation with asset prices. Given the inverse relationship between interest rates and price, an increase in volatility will coincide with an increase in interest rates.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;deficit-spending&quot;&gt;Deficit spending&lt;/h3&gt;
&lt;p&gt;Let’s say hypothetically that an increase in military spending will be offset by recuded healthcare expenditures. Still, the increased infrastructure spending will have to come from somewhere. This will likely be funded with debt. An increase in the supply of debt reduces the price, which leads to an increase in interest rates.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reduced-foreign-demand-for-treasuries&quot;&gt;Reduced foreign demand for treasuries&lt;/h3&gt;
&lt;p&gt;We own most of our own debt through the social security trust fund and federal reserve, so renegotating US debt would not fix anything. Our largest international creditors, China and Japan, have other options. They will continue to reduce their demand for treasures as US credit worthiness deteriorates. Reduced demand leads to lower prices and higher interest rates.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;increased-borrowing-costs&quot;&gt;Increased borrowing costs&lt;/h3&gt;
&lt;p&gt;As interest rates on government debt increase, so will interest rates on corporate bonds. Both residential and commercial mortgage rates will increase as well. Purchasing assets becomes more difficult as borrowing costs increase.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;higher-returns-on-cash&quot;&gt;Higher returns on cash&lt;/h3&gt;
&lt;p&gt;As the period of near-zero interest rates comes to an end, the incentive to save money and earn high interest rates will return. While higher returns on cash may seem like a good thing, it comes at the cost of reduced investment.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Increased volatility, greater supply, and lower demand for treasuries are causing interest rates to increase. An increase in borrowing costs and a higher return on cash will perpetuate the rise in interest rates by slowing down economic growth and lowering income tax revenue. What is an investor to do?&lt;/p&gt;

&lt;p&gt;The current economic outlook presents us with a conundrum. While banks may benefit from higher interest rates, weak economic growth will offset that to some degree. Whether or not the US actually defaults on its debt, we will certainly see panics and crashes over the next couple of years. Ratings agency downgrades, bank-runs, and capital controls combined with the factors outlined above will make it difficult for people to trust banks and take advantage of higher interest rates, while money under the mattress could lose value due to currency depreciation and associated inflationary pressures.&lt;/p&gt;

&lt;p&gt;My personal reccomendation would be to purchase high quality stocks when market prices drop. This approach will provide you with a stable stream of growing dividend payments. You can subscribe to my newsletter &lt;a href=&quot;http://www.valunicorn.me/&quot;&gt;Valunicorn&lt;/a&gt; for free during 2016 and remain grandfathered in for life! Whatever you decide, be prepared for a period of rising interest rates due to the five simple reasons outlined above.&lt;/p&gt;

</description>
        <pubDate>Fri, 11 Nov 2016 14:00:00 -0700</pubDate>
        <link>http://seanhelvey.com/5-reasons-interest-rates-are-rising/</link>
        <guid isPermaLink="true">http://seanhelvey.com/5-reasons-interest-rates-are-rising/</guid>
        
        
      </item>
    
  </channel>
</rss>
