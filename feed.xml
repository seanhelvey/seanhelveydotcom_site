<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sean Helvey</title>
    <description>My first word was cheese
</description>
    <link>http://seanhelvey.com/</link>
    <atom:link href="http://seanhelvey.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 31 Jan 2020 12:13:50 -0800</pubDate>
    <lastBuildDate>Fri, 31 Jan 2020 12:13:50 -0800</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Notes on The Yoga Sutras</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“If you can control the rising of the mind into ripples, you will experience Yoga.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I read Sri Swami Satchidananda’s translation and commentary on The Yoga Sutras of Patanjali and would like to share my brief notes in case it is helpful. For me, The Sutras are extremely interesting because they are ancient and have been highly influential. The translation and notes are very practical and insightful, so hopefully an even more condensed version here captures some of that.&lt;/p&gt;

&lt;p&gt;While the original Sutras may seem inaccessible, Satchidananda’s notes quickly point out that almost all of them are written only to elaborate on the first few, summarized in the quote above. I found that to be quite striking, and also very encouraging. Yoga teachers will say things like this, but still most people think that yoga is about poses, instead of controlling the mind.&lt;/p&gt;

&lt;p&gt;Another key takeaway for me relates to meditation. Again, meditation guides will tell you to integrate your practice. While you may only meditate for 5-10 minutes in a day, the aim is to incorporate that into your life. The Sutras make this clear, by saying that it is more of a practice than a philosophy, and you need to practice all of the time for a long time.&lt;/p&gt;

&lt;p&gt;Please take my notes with a grain of salt. These are my notes based on another persons translations and notes. Notes on notes on notes! The notes here below are not the original Sutras, but a distillation or key takeaway based on the original Sutra of Patanjali and commentary from Satchidananda’s translation.&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;img alt=&quot;sutras&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2019/sutras.jpg&quot; /&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;book-1---contemplation&quot;&gt;Book 1 - Contemplation&lt;/h2&gt;

&lt;h4 id=&quot;sutra-1-this-is-about-how-to-practice-yoga-mere-philosophy-is-not-enough&quot;&gt;Sutra #1 This is about how to practice yoga. Mere philosophy is not enough.&lt;/h4&gt;

&lt;h4 id=&quot;sutra-2-the-restraint-of-the-modifications-of-the-mind-stuff-is-yoga-three-parts-of-the-mind-ego-discriminative-facility-and-senses-these-modifications-of-the-mind-stuff-can-disturb-your-inner-peace-yoga-is-using-restraint-to-maintain-your-inner-peace&quot;&gt;Sutra #2 The restraint of the modifications of the mind-stuff is Yoga. Three parts of the mind: Ego, discriminative facility, and senses. These modifications of the mind-stuff can disturb your inner peace. Yoga is using restraint to maintain your inner peace.&lt;/h4&gt;

&lt;h4 id=&quot;sutra-3-the-seer-self-abides-in-its-own-nature-you-are-not-the-body-or-mind-the-seer-or-self-reflects-in-the-mind-which-is-your-mirror-when-the-mind-ceases-to-create-thought-forms-you-see-your-true-self&quot;&gt;Sutra #3 The Seer (Self) abides in it’s own nature. You are not the body or mind. The Seer, or self, reflects in the mind which is your mirror. When the mind ceases to create thought forms, you see your true Self.&lt;/h4&gt;

&lt;h4 id=&quot;sutra-5-the-five-mental-modifications-can-be-painful-or-painless-basically-the-selfish-thoughts-bring-pain&quot;&gt;Sutra #5 The five mental modifications can be painful or painless. Basically the selfish thoughts bring pain.&lt;/h4&gt;

&lt;h4 id=&quot;sutra-6-they-are-right-knowledge-misconception-verbal-delusion-sleep-and-memory&quot;&gt;Sutra #6 They are right knowledge, misconception, verbal delusion, sleep, and memory.&lt;/h4&gt;

&lt;h4 id=&quot;sutra-12-the-mental-modifications-are-restrained-by-practice-and-non-attachment&quot;&gt;Sutra #12 The mental modifications are restrained by practice and non-attachment.&lt;/h4&gt;

&lt;h4 id=&quot;sutra-1314-you-have-to-stick-with-this-and-do-it-all-the-time-for-a-long-time&quot;&gt;Sutra #13/#14 you have to stick with this and do it all the time for a long time.&lt;/h4&gt;

&lt;h4 id=&quot;sutra-15-if-you-are-unattached-wont-you-be-dull-no-avoid-personal-desires-and-be-greedy-in-serving-others&quot;&gt;Sutra #15 If you are unattached, won’t you be dull? No. Avoid personal desires and be greedy in serving others.&lt;/h4&gt;

&lt;h4 id=&quot;sutra-20-you-must-be-strong-and-have-a-good-memory-of-mistakes-made--lessons-learned-to-not-fall-back-into-your-worldly-rut-again&quot;&gt;Sutra #20 You must be strong and have a good memory of mistakes made / lessons learned to not fall back into your worldly rut again.&lt;/h4&gt;

&lt;h4 id=&quot;sutra-26-youve-gotta-transcend-the-mind-and-nature-to-achieve-eternal-peace-this-is-union-with-god&quot;&gt;Sutra #26 You’ve gotta transcend the mind and nature to achieve eternal peace. This is union with God.&lt;/h4&gt;

&lt;h4 id=&quot;sutra-32-the-practice-of-concentration-on-a-single-subject-or-the-use-of-one-technique-is-the-best-way-to-prevent-obstacles&quot;&gt;Sutra #32 The practice of concentration on a single subject or the use of one technique is the best way to prevent obstacles.&lt;/h4&gt;

&lt;h4 id=&quot;sutra-33-by-cultivating-attitudes-of-friendliness-toward-the-happy-compassion-for-the-unhappy-delight-in-the-virtuous-and-disregard-for-the-wicked-the-mind-stuff-retains-its-undisturbed-calmness-dont-try-to-advise-the-wicked-because-they-wont-take-your-advice-if-you-try-to-advise-them-you-will-lose-your-peace&quot;&gt;Sutra #33 By cultivating attitudes of friendliness toward the happy, compassion for the unhappy, delight in the virtuous, and disregard for the wicked, the mind-stuff retains its undisturbed calmness. Don’t try to advise the wicked, because they won’t take your advice. If you try to advise them, you will lose your peace.&lt;/h4&gt;

&lt;h4 id=&quot;sutra-34-if-you-regulate-the-breath-you-regulate-the-mind-automatically-also&quot;&gt;Sutra #34 If you regulate the breath, you regulate the mind automatically also.&lt;/h4&gt;

&lt;h4 id=&quot;sutra-41-as-a-crystal-assumes-shapes-and-colors-of-objects-near-it-so-is-the-yogis-mind-true-of-both-the-body-and-mind-if-you-develop-one-idea-through-constant-meditation-all-other-thoughts-and-desires-will-gradually-die-away&quot;&gt;Sutra #41 As a crystal assumes shapes and colors of objects near it, so is the yogi’s mind. True of both the body and mind. If you develop one idea through constant meditation, all other thoughts and desires will gradually die away.&lt;/h4&gt;

&lt;h2 id=&quot;book-2---practice&quot;&gt;Book 2 - Practice&lt;/h2&gt;
&lt;h4 id=&quot;sutra-1-accepting-pain-as-purification-study-of-spiritual-books-and-surrender-to-the-supreme-being-constitute-yoga-in-practice-speech-should-bring-tranquility-and-be-truthful-pleasant-and-beneficial&quot;&gt;Sutra #1 Accepting pain as purification, study of spiritual books and surrender to the Supreme Being constitute yoga in practice. Speech should bring tranquility and be truthful, pleasant, and beneficial.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-2-the-five-obstacles-are-ignorance-egoism-attachment-hatred-and-clinging-to-bodily-life&quot;&gt;Sutra #2 The five obstacles are ignorance, egoism, attachment, hatred, and clinging to bodily life.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-14-the-karmas-bear-fruits-of-pleasure-and-pain-caused-by-our-own-actions&quot;&gt;Sutra #14 The karmas bear fruits of pleasure and pain caused by our own actions.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-1518-avoid-attachment-or-resistance-to-things-like-stock-prices-rising-and-falling-pleasure-and-pain-learn-to-swim-in-these-fluctuations-like-water&quot;&gt;Sutra #15/18 Avoid attachment or resistance to things like stock prices rising and falling, pleasure and pain. Learn to swim in these fluctuations like water.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-20-todays-sinner-is-tomorrows-saint-we-will-never-criticize-a-sinner-if-we-realize-that-we-were-once-in-the-same-boat&quot;&gt;Sutra #20 Today’s sinner is tomorrow’s saint. We will never criticize a sinner if we realize that we were once in the same boat.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-22-we-can-think-of-the-world-as-a-factory-where-raw-materials-come-in-and-products-come-out-understanding-this-illusion-leads-to-liberation&quot;&gt;Sutra #22 We can think of the world as a factory where raw materials come in and products come out. Understanding this illusion leads to liberation.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-2425-the-author-laughs-at-the-previous-idea-which-can-be-seen-as-ignorant-because-we-can-take-it-to-another-level-and-rise-above-the-illusion-not-trying-to-understand-it&quot;&gt;Sutra #24/25 The author laughs at the previous idea, which can be seen as ignorant, because we can take it to another level and rise above the illusion, not trying to understand it.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-25-as-the-mind-so-is-the-person-if-we-think-we-are-bound-we-are-bound-if-we-think-we-are-liberated-we-are-liberated-we-can-transcend-all-of-this-if-we-get-out-of-our-heads-and-thoughts&quot;&gt;Sutra #25 As the mind, so is the person. If we think we are bound, we are bound. If we think we are liberated, we are liberated. We can transcend all of this if we get out of our heads and thoughts.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-26-discernment-is-the-way-to-avoid-ignorance&quot;&gt;Sutra #26 Discernment is the way to avoid ignorance.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-27-ones-wisdom-in-the-final-stage-is-sevenfold-one-experiences-the-end-1-the-desire-to-know-anything-more-2-the-desire-to-stay-away-from-anything-3-the-desire-to-gain-anything-new-4-the-desire-to-do-anything-5-sorrow-6-fear-7-delusion-we-are-not-going-to-get-it-from-outside-look-inside&quot;&gt;Sutra #27 One’s wisdom in the final stage is sevenfold. One experiences the end 1) The desire to know anything more 2) The desire to stay away from anything 3) The desire to gain anything new 4) The desire to do anything 5) Sorrow 6) Fear 7) Delusion. We are not going to get it from outside. Look inside.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-28-the-eight-limbs-of-yoga-are-1-abstinence-2-observance-3-posture-practice-4-breath-control-5-sense-withdrawal-6-concentration-7-meditation-8-contemplation-absorption-superconscious-state-worth-reading-a-longer-explanation-on-each-if-you-are-still-reading-these-notes-and-curious&quot;&gt;Sutra #28 The eight limbs of yoga are 1) Abstinence 2) Observance 3) Posture practice 4) Breath control 5) Sense withdrawal 6) Concentration 7) Meditation 8) Contemplation, absorption, superconscious state. Worth reading a longer explanation on each, if you are still reading these notes and curious.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-33-when-disturbed-by-negative-thoughts-opposite-positive-ones-should-be-thought-of-we-can-create-a-positive-atmosphere-by-looking-at-a-holy-picture-reading-an-inspiring-book-by-meeting-with-a-special-person-or-simply-by-leaving-the-disturbing-environment&quot;&gt;Sutra #33 When disturbed by negative thoughts, opposite (positive) ones should be thought of. We can create a positive atmosphere by looking at a holy picture, reading an inspiring book, by meeting with a special person, or simply by leaving the disturbing environment.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-40-an-ayurvedic-practice-called-kaya-kapla-is-mentioned-here-to-make-the-point-that-all-scriptures-purposefully-have-esoteric-meanings-to-make-sure-that-people-are-prepared-to-use-them-selflessly-rather-than-in-a-selfish-way&quot;&gt;Sutra #40 An Ayurvedic practice called kaya-kapla is mentioned here to make the point that all scriptures purposefully have esoteric meanings to make sure that people are prepared to use them selflessly rather than in a selfish way.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-43-the-mind-must-be-washed-squeezed-tossed-tried-and-ironed-like-a-cloth-to-become-pure&quot;&gt;Sutra #43 The mind must be washed, squeezed, tossed, tried, and ironed like a cloth to become pure.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-45-there-should-be-a-gentle-yogic-touch-with-everythingeven-our-spoons-forks-and-plates&quot;&gt;Sutra #45 There should be a gentle yogic touch with everything—even our spoons, forks, and plates.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-47-meditate-on-infinite-things-to-gain-control-of-the-mind-sometimes-simply-big-things-can-be-helpful-anything-great-huge-well-settled-and-well-established-think-mountains-rocks-ancient-buildings-rivers-oceans-etc&quot;&gt;Sutra #47 Meditate on infinite things to gain control of the mind. Sometimes simply big things can be helpful. Anything great, huge, well-settled, and well-established. Think mountains, rocks, ancient buildings, rivers, oceans, etc.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-50-control-and-discipline-are-very-necessary-in-our-lives-without-discipline-nothing-can-be-achieved-it-isnt-the-ratio-of-the-breath-that-is-important-though-it-is-the-amount-or-duration-of-breaths-in-a-row&quot;&gt;Sutra #50 Control and discipline are very necessary in our lives. Without discipline, nothing can be achieved. It isn’t the ratio of the breath that is important though, it is the amount or duration of breaths in a row.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-51-wherever-the-mind-goes-the-breath-follows-first-though-learn-to-control-the-physical-body-breath-and-senses-it-is-easier-to-control-the-mind-through-controlling-the-breath-rather-than-attempting-to-control-the-mind-directly&quot;&gt;Sutra #51 Wherever the mind goes, the breath follows. First though, learn to control the physical body, breath, and senses. It is easier to control the mind through controlling the breath, rather than attempting to control the mind directly.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-52-the-mind-is-a-veil-woven-of-thoughts-it-has-no-substance-by-itself&quot;&gt;Sutra #52 The mind is a veil woven of thoughts. It has no substance by itself.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-54-in-the-bhagavad-gita-the-battle-with-the-senses-is-explained-using-a-battlefield-analogy-the-senses-try-to-pull-the-mind-in-many-different-directions&quot;&gt;Sutra #54 In the Bhagavad Gita the battle with the senses is explained using a battlefield analogy. The senses try to pull the mind in many different directions.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-55-you-can-use-the-breath-to-control-the-senses&quot;&gt;Sutra #55 You can use the breath to control the senses.&lt;/h4&gt;

&lt;h2 id=&quot;book-4---absoluteness&quot;&gt;Book 4 - Absoluteness&lt;/h2&gt;
&lt;h4 id=&quot;sutra-19-at-the-end-of-a-yoga-class-in-savasana-the-hatha-yoga-corpse-pose-you-may-say-i-am-not-the-body-the-body-is-just-laying-here-but-when-you-get-up-if-somebody-disrespects-or-offends-you-in-anyway-we-immediately-become-disturbed-spiritual-practice-is-bringing-this-awareness-back-again-and-again-even-after-we-inevitably-slip-up&quot;&gt;Sutra #19 At the end of a yoga class, in savasana (the Hatha Yoga Corpse Pose) you may say “I am not the body, the body is just laying here.” But when you get up, if somebody disrespects or offends you in anyway, we immediately become disturbed. Spiritual practice is bringing this awareness back again and again even after we inevitably slip up.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-31-what-is-impurity-it-is-like-the-sensitive-coating-on-a-photographic-film-the-i-and-mine-coat-our-mental-film-and-want-to-catch-everything-they-see-the-point-of-yoga-is-to-avoid-recording-or-fixating-on-anything-in-this-way&quot;&gt;Sutra #31 What is impurity? It is like the sensitive coating on a photographic film. The “I” and “mine” coat our mental film and want to catch everything they see. The point of yoga is to avoid recording or fixating on anything in this way.&lt;/h4&gt;
&lt;h4 id=&quot;sutra-34-we-can-achieve-independence-and-rest-in-our-own-true-nature-if-we-allow-our-body-and-mind-to-function-without-fixation-all-of-this-yoga-is-actually-needed-by-the-ego-and-done-with-the-mind-and-body-you-can-let-the-ego-mind-and-body-rest-in-peace-though-reflecting-your-true-higher-self-learn-to-lead-a-dedicated-life-serving-others&quot;&gt;Sutra #34 We can achieve Independence and rest in our own true nature if we allow our body and mind to function without fixation. All of this yoga is actually needed by the ego and done with the mind and body. You can let the ego, mind, and body rest in peace though, reflecting your true higher Self. Learn to lead a dedicated life serving others.&lt;/h4&gt;
</description>
        <pubDate>Sat, 07 Dec 2019 00:00:00 -0800</pubDate>
        <link>http://seanhelvey.com/notes-on-the-yoga-sutras/</link>
        <guid isPermaLink="true">http://seanhelvey.com/notes-on-the-yoga-sutras/</guid>
        
        
      </item>
    
      <item>
        <title>Rails without sudo</title>
        <description>&lt;p&gt;The installation process is an unfortunate stumbling block for many people learning Ruby on Rails. While it is easy to get going, it is also too easy to end up using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; to install various things as root along the way. I remember this being annoying for me 7 years ago, and revisiting the framework today, it does not seem like much had changed. Hopefully these steps will help!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Follow the &lt;a href=&quot;https://github.com/rbenv/rbenv#installation&quot;&gt;installation instructions&lt;/a&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Before installing bundler or rails, run &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv global &amp;lt;version&amp;gt;&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;version&amp;gt;&lt;/code&gt; is the latest stable version of Ruby, and &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv rehash&lt;/code&gt; to make sure it is being used.&lt;/li&gt;
  &lt;li&gt;Now when you run &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install rails&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt; you should not be prompted to run any commands using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2019/Yay.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;todo&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2019/Yay.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Yay!
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 07 Mar 2019 00:00:00 -0800</pubDate>
        <link>http://seanhelvey.com/rails-without-sudo/</link>
        <guid isPermaLink="true">http://seanhelvey.com/rails-without-sudo/</guid>
        
        
      </item>
    
      <item>
        <title>Understanding 'this' in JavaScript</title>
        <description>&lt;p&gt;Here is a snippet and &lt;a href=&quot;http://dev.seanhelvey.com/this/this.html&quot;&gt;link to my favorite example&lt;/a&gt; that you can use to understand &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; in JavaScript. Make sure you have the console open and read the logs as you click on the buttons. The code is &lt;a href=&quot;https://github.com/seanhelvey/snippets/tree/master/this&quot;&gt;here in GitHub&lt;/a&gt; as well.&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;todo&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/thisES56.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    this.age works as expected with an ES6 arrow function
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h1 id=&quot;why-this-example&quot;&gt;Why ‘this’ example?&lt;/h1&gt;

&lt;p&gt;This example is helpful because it doesn’t need to be transpiled. It works with vanilla JS today in current browsers. Most students these days are working in a React codebase where they can magically write a method as an arrow function, but the &lt;a href=&quot;https://github.com/tc39/proposal-class-fields&quot;&gt;class fields proposal&lt;/a&gt; isn’t official yet. Here is &lt;a href=&quot;https://stackoverflow.com/questions/45785117/arrow-functions-within-classes-are-not-supported-in-chrome-but-work-fine-through#answer-45788648&quot;&gt;a Stack Overflow answer&lt;/a&gt; explaining that with more context.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;console.log(&quot;window&quot;, this)

class Person {
    constructor (name, age) {
        this.name = name;
        this.age = age;

        this.makeOlderES5 = function(event) {
            console.log(&quot;makeOlderES5&quot;)
            console.log(&quot;this&quot;, this)
            console.log(&quot;event.target&quot;, event.target)
            this.age++;
            console.log(&quot;this.age&quot;, this.age)
        }

        this.makeOlderES6 = (event) =&amp;gt; {
            console.log(&quot;makeOlderES6&quot;)
            console.log(&quot;this&quot;, this)
            console.log(&quot;event.target&quot;, event.target)
            this.age++;
            console.log(&quot;this.age&quot;, this.age)
        }
        console.log(&quot;person&quot;, this)
    }
}

let person = new Person(&quot;Jake&quot;, 55)

let buttonES5 = document.querySelector(&quot;.ES5&quot;)
buttonES5.addEventListener(&quot;click&quot;, person.makeOlderES5);

let buttonES6 = document.querySelector(&quot;.ES6&quot;)
buttonES6.addEventListener(&quot;click&quot;, person.makeOlderES6);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 11 Dec 2018 00:00:00 -0800</pubDate>
        <link>http://seanhelvey.com/understanding-this-in-javascript/</link>
        <guid isPermaLink="true">http://seanhelvey.com/understanding-this-in-javascript/</guid>
        
        
      </item>
    
      <item>
        <title>Playing with Rust and Kotlin</title>
        <description>&lt;p&gt;While it is clear that I enjoy using Elm for front-end web development, I’ve been trying to find the best tool for simple back-end web applications for several years now. I want to share two toy projects I recently started working on in case it is helpful for anyone out there. Both have been deployed to Heroku.&lt;/p&gt;

&lt;h1 id=&quot;language-features&quot;&gt;Language Features&lt;/h1&gt;

&lt;p&gt;Each of these languages has the features that I’m looking for:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Static typing&lt;/li&gt;
  &lt;li&gt;Immutability&lt;/li&gt;
  &lt;li&gt;Sum types&lt;/li&gt;
  &lt;li&gt;Safety&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;kotlin--ktor&quot;&gt;Kotlin &amp;amp; Ktor&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/seanhelvey/kotlinplayground&quot;&gt;Kotlin Playground&lt;/a&gt;&lt;br /&gt;
A Kotlin toy back-end. Initially written with Spark before being ported to Ktor.&lt;/p&gt;

&lt;p&gt;While Spring may be the obvious choice for Java/Kotlin projects, I tried Spark before settling on Ktor because the framework appears to fully utilize Kotlin’s DSL capabilities. Code looks declarative, but the APIs are mostly function calls with lambdas.&lt;/p&gt;

&lt;h1 id=&quot;rust--rocket&quot;&gt;Rust &amp;amp; Rocket&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/seanhelvey/rustplayground&quot;&gt;Rust Playground&lt;/a&gt;&lt;br /&gt;
A Rust toy back-end using the web framework Rocket.&lt;/p&gt;

&lt;p&gt;Short to medium term it seems as if Kotlin is my best bet, due to the language features and its widespread adoption. Longer term as the industry (hopefully) moves away from dependency on the JVM, Rust seems very well positioned to gain market share.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Please feel free to follow along as I tinker with these projects! Huge thanks to &lt;a href=&quot;https://github.com/bgard6977?tab=followers&quot;&gt;Brent Gardner&lt;/a&gt; for pairing with me on this and &lt;a href=&quot;https://github.com/dam5s&quot;&gt;Damien LeBerrigaud&lt;/a&gt; for all of the inspiration.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Sep 2018 00:00:00 -0700</pubDate>
        <link>http://seanhelvey.com/playing-with-rust-and-kotlin/</link>
        <guid isPermaLink="true">http://seanhelvey.com/playing-with-rust-and-kotlin/</guid>
        
        
      </item>
    
      <item>
        <title>Next Iteration of Valunicorn Calculator</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“The goal is two-fold: level-up my Elm skills by continuing to maintain and develop a more complex application and add features to a project which people can use to invest sustainably.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve been working on the value investing newsletter &lt;a href=&quot;http://www.valunicorn.me/&quot;&gt;Valunicorn&lt;/a&gt; since January of 2015. I began developing a &lt;a href=&quot;http://www.valunicorn.me/calculator.html&quot;&gt;dividend calculator&lt;/a&gt; during 2016 using the programming language Elm. Currently you can use the calculator to see what $1,000 would be worth assuming dividend growth stays constant and dividends are reinvested over a period of time.&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;http://www.valunicorn.me/calculator.html&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;todo&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/calculator.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    The Valunicorn Calculator
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;With 100 commits in &lt;a href=&quot;https://github.com/seanhelvey/valunicorn&quot;&gt;GitHub&lt;/a&gt; up to this point, I am about to embark on the next iteration of the calculator. The goal is two-fold: level-up my Elm skills by continuing to maintain and develop a more complex application and add features to a project which people can use to invest sustainably.&lt;/p&gt;

&lt;h1 id=&quot;objectives&quot;&gt;Objectives&lt;/h1&gt;
&lt;p&gt;I have received a ton of great input on this project over the last couple of years. The most exciting so far has resulted in coverage of sustainable listings, the first of which is 3M (MMM). I’m outlining some objectives for the next iteration here to keep myself accountable and provide visibility:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chores
    &lt;ul&gt;
      &lt;li&gt;Testing - The core calculator functionality will be more thoroughly tested.&lt;/li&gt;
      &lt;li&gt;Upgrade - Elm 0.19 will be adopted once it has been released.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bug fixes
    &lt;ul&gt;
      &lt;li&gt;Rounding - Floats will be properly rounded and displayed while hovering over the chart.&lt;/li&gt;
      &lt;li&gt;Y-axis display - This axis will no longer be truncated for large outputs.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;New features
    &lt;ul&gt;
      &lt;li&gt;Custom stocks - Subscribers will be able to use the calculator with any stock, not just those selected by Valunicorn.&lt;/li&gt;
      &lt;li&gt;Custom portfolios - The ability to adjust the input holding amount and calculate the future value for an entire portfolio of holdings rather than one individual stock.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;gratitude&quot;&gt;Gratitude&lt;/h1&gt;
&lt;p&gt;To the supportive Elm community, our local &lt;a href=&quot;https://www.meetup.com/Front-range-elm/&quot;&gt;Front Range Elm Meetup&lt;/a&gt;, Pivotal Labs for sponsoring that group, and the &lt;a href=&quot;https://www.meetup.com/Northern-Colorado-Value-Investing-Meetup/&quot;&gt;Northern Colorado Value Investing Meetup&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jul 2018 00:00:00 -0700</pubDate>
        <link>http://seanhelvey.com/next-iteration-valunicorn-calculator/</link>
        <guid isPermaLink="true">http://seanhelvey.com/next-iteration-valunicorn-calculator/</guid>
        
        
      </item>
    
      <item>
        <title>Ejected create-react-app not working on Heroku</title>
        <description>&lt;p&gt;This post is for everyone learning React out there. Weekend warriors, boot campers, and autodidacts.. I’m here for you! They told you not to do it, but you did it anyway.&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;http://carhumor.net/wp-content/uploads/2012/10/car-humor-funny-traffic-sign-one-way.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;oneway&quot; class=&quot; lazyloaded&quot; src=&quot;http://carhumor.net/wp-content/uploads/2012/10/car-humor-funny-traffic-sign-one-way.jpg&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Note: this is a one-way operation.
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;You used create-react-app followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run eject&lt;/code&gt; and now your app doesn’t work on Heroku. You google and find that the maintainers of create-react-app have no answers for you. Can you blame them? They are busy! So here we go:&lt;/p&gt;

&lt;h3 id=&quot;make-sure-you-are-running-the-right-build-pack&quot;&gt;Make sure you are running the right build pack&lt;/h3&gt;
&lt;p&gt;If you have already deployed your app created with create-react-app to Heroku, you are probably using the create-react-app-buildpack. After ejecting, you will need to remove that buildpack and add the heroku/nodejs buildpack instead.&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/buildpacks.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;buildpacks&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/buildpacks.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Heroku &amp;gt; App &amp;gt; Settings &amp;gt; Buildpacks
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;update-your-procfile&quot;&gt;Update your Procfile&lt;/h3&gt;
&lt;p&gt;This one is tricky because the create-react-app maintainers don’t have the time to debug this Heroku issue for you. Also, they told you not to eject!&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;https://media.giphy.com/media/JGF7ctowtLGak/giphy.gif&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;eject&quot; class=&quot; lazyloaded&quot; src=&quot;https://media.giphy.com/media/JGF7ctowtLGak/giphy.gif&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Once you eject, you can’t go back!
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;But you did. So you need to update your procfile to something like &lt;code class=&quot;highlighter-rouge&quot;&gt;web: node scripts/start.js&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;web: react-scripts start&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/procfile.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;procfile&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/procfile.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Update your Procfile
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;That should do it. Don’t forget to take a look at your GitHub repo along the way and make sure your most recent changes made it up there. That may sound obvious, but it is something that can easily be overlooked in the heat of the moment. Hope this helps!&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 -0800</pubDate>
        <link>http://seanhelvey.com/ejected-create-react-app-not-working-on-heroku/</link>
        <guid isPermaLink="true">http://seanhelvey.com/ejected-create-react-app-not-working-on-heroku/</guid>
        
        
      </item>
    
      <item>
        <title>Elm in React Part #3</title>
        <description>&lt;p&gt;This is a follow-up to &lt;a href=&quot;http://www.seanhelvey.com/elm-in-react-part-2/&quot;&gt;Elm in React Part #2&lt;/a&gt;. We have replaced the “add todo” form view of a React todo list app with Elm, but we still need model and update functions as part of The Elm Architecture. We also need ports to communicate with JavaScript or React in this case. Checkout the Elm branch of &lt;a href=&quot;https://github.com/seanhelvey/react-intro-exercise&quot;&gt;this todo list repo&lt;/a&gt; if you want to follow along. Here are the remaining steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a Html.program following the &lt;a href=&quot;https://github.com/evancz/react-elm-components/blob/master/example/Chat.elm&quot;&gt;react-elm-components&lt;/a&gt; example&lt;/li&gt;
  &lt;li&gt;Wire-up view to produce a message and display the updated model&lt;/li&gt;
  &lt;li&gt;Use ports to send messages to JavaScript / React&lt;/li&gt;
  &lt;li&gt;Subscribe to the port in your JavaScript / React&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;“When the user clicks on a button, it produces a message. That message is piped into the update function, producing a new model. We use the view function to show the new model on screen. And then we just repeat this forever!” - Evan Czaplicki&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;step-1----create-a-htmlprogram&quot;&gt;Step 1 -  Create a Html.program&lt;/h3&gt;
&lt;p&gt;Take a good look at the &lt;a href=&quot;https://github.com/evancz/react-elm-components/blob/master/example/Chat.elm&quot;&gt;react-elm-components&lt;/a&gt; example and think about how you can solve this problem using The Elm Architecture. I decided that our model could simply be the &lt;code class=&quot;highlighter-rouge&quot;&gt;Input String&lt;/code&gt; portion of the model used in the example.&lt;/p&gt;

&lt;h4 id=&quot;model&quot;&gt;Model&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type alias Model =
    { input : String }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Msg and update function could be very similar too. We can still have an &lt;code class=&quot;highlighter-rouge&quot;&gt;Input&lt;/code&gt; case for user input, and we can use the Msg &lt;code class=&quot;highlighter-rouge&quot;&gt;Submit&lt;/code&gt; instead of send.&lt;/p&gt;

&lt;h4 id=&quot;msg&quot;&gt;Msg&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Msg
    = Submit
    | Input String
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;update&quot;&gt;Update&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        Submit -&amp;gt;
            let
                oldInput =
                    model.input
            in
                ( { model | input = &quot;&quot; }
                , submit oldInput
                )

        Input newInput -&amp;gt;
            ( { model | input = newInput }
            , Cmd.none
            )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What is lowercase “submit” where it says &lt;code class=&quot;highlighter-rouge&quot;&gt;submit oldInput&lt;/code&gt; in the snippet above? That is our port, which we will discuss next. Feel free to replace it with &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd.none&lt;/code&gt; temporarily and allow the compiler to guide you the rest of the way.&lt;/p&gt;

&lt;p&gt;There is a certain amount of pain and pleasure that we experience using a compiled language. It takes patience and practice in order to become comfortable with the process. Try to have some fun exploring this! Don’t forget that &lt;a href=&quot;https://github.com/seanhelvey/react-intro-exercise&quot;&gt;this todo list repo&lt;/a&gt; has my solution in the Elm branch.&lt;/p&gt;

&lt;h3 id=&quot;step-2---wire-up-view&quot;&gt;Step 2 - Wire-up view&lt;/h3&gt;
&lt;p&gt;We will now wire-up the view to produce a message and display the updated model. Remember our stub view from &lt;a href=&quot;http://www.seanhelvey.com/elm-in-react-part-2/&quot;&gt;Elm in React Part #2&lt;/a&gt;?&lt;/p&gt;

&lt;h4 id=&quot;our-stub-view-function&quot;&gt;Our stub view function&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;port module AddCardForm exposing (main)

import Html exposing (text, form, input, label, fieldset)
import Html.Attributes exposing (attribute, id, class)


main =
    form [ class &quot;well&quot; ]
        [ fieldset [ class &quot;form-group&quot; ]
            [ label [ attribute &quot;htmlFor&quot; &quot;title&quot; ]
                [ text &quot;Title&quot; ]
            , input [ class &quot;form-control&quot;, id &quot;title&quot; ] []
            ]
        ]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s make it so that when a user clicks on a button, it produces a message. Once that message has been piped into the update function, we will use the view function to show the new model on screen.&lt;/p&gt;

&lt;h4 id=&quot;the-completed-view-function&quot;&gt;The completed view function&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;view : Model -&amp;gt; Html Msg
view model =
    let
        options =
            { stopPropagation = False, preventDefault = True }
    in
        form [ class &quot;well&quot;, onWithOptions &quot;submit&quot; options (Json.succeed Submit) ]
            [ fieldset [ class &quot;form-group&quot; ]
                [ label [ attribute &quot;htmlFor&quot; &quot;title&quot; ]
                    [ text &quot;Title&quot; ]
                , input [ class &quot;form-control&quot;, value model.input, id &quot;title&quot;, onInput Input ] []
                ]
            ]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-3---use-ports-to-communicate-with-javascript--react&quot;&gt;Step 3 - Use ports to communicate with JavaScript / React&lt;/h3&gt;
&lt;p&gt;To use Elm ports, we need the keyword “port” in front of our module declaration at the top of the file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;port module AddCardForm exposing (main)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we add a port for sending Strings out to JavaScript or React.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;port submit : String -&amp;gt; Cmd msg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It could be a different type such as &lt;code class=&quot;highlighter-rouge&quot;&gt;List Float&lt;/code&gt;. &lt;a href=&quot;https://github.com/seanhelvey/valunicorn/blob/master/src/Calculator.elm&quot;&gt;Here is an example&lt;/a&gt; of a port sending a &lt;code class=&quot;highlighter-rouge&quot;&gt;List Float&lt;/code&gt; to JavaScript.&lt;/p&gt;

&lt;h3 id=&quot;step-4---subscribe-to-the-port-from-javascript--react&quot;&gt;Step 4 - Subscribe to the port from JavaScript / React&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/evancz/react-elm-components/blob/master/example/Chat.elm&quot;&gt;react-elm-components&lt;/a&gt; library allows us to very simply wire up ports with our React component in the following way:&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/addPortsReact.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;addPortsReact&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/addPortsReact.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    We are done!
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;So this is the end of our three part series of blog posts on “Elm in React”. I learned a ton going through this and would appreciate any feedback you have. Hopefully it helps someone gradually incorporate Elm into an existing JavaScript or React application. Thanks for tuning in!&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Feb 2018 00:00:00 -0800</pubDate>
        <link>http://seanhelvey.com/elm-in-react-part-3/</link>
        <guid isPermaLink="true">http://seanhelvey.com/elm-in-react-part-3/</guid>
        
        
      </item>
    
      <item>
        <title>Elm in React Part #2</title>
        <description>&lt;p&gt;This is a follow-up to &lt;a href=&quot;http://www.seanhelvey.com/elm-in-react-part-1/&quot;&gt;Elm in React Part #1&lt;/a&gt;. In the first post we replaced the “add todo” form portion of a React todo list app with “hello world” written in Elm. Now we will replace the Elm “hello world” stub with an Elm view. Checkout the Elm branch of &lt;a href=&quot;https://github.com/seanhelvey/react-intro-exercise&quot;&gt;this todo list repo&lt;/a&gt; if you want to follow along. In plain English these are the steps I took:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Surrender to the Elm Architecture&lt;/li&gt;
  &lt;li&gt;Try to translate the view from JSX to Elm&lt;/li&gt;
  &lt;li&gt;Follow the friendly compiler error messages&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/todo.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;todo&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/todo.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    A simple todo list
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-1----surrender-to-the-elm-architecture&quot;&gt;Step 1 -  Surrender to the Elm Architecture&lt;/h3&gt;
&lt;p&gt;Don’t fight or resist it! If you really are porting a React app, you are probably stuck thinking about props, state, and event handlers. In some ways writing an Elm application from scratch is easier than translating existing JavaScript or React. For me, the mental shift back to Elm from React was tough, but it was an amazing learning experience.&lt;/p&gt;

&lt;p&gt;One trick I’ve learned trying to teach Elm over the last couple of months is that you can start with a simple view before diving into model and update. I know this might go against other conventional Elm wisdom and I am open to feedback, but something like this here below can be a nice small step toward Elmy goodness IMHO.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;port module AddCardForm exposing (main)

import Html exposing (text, form, input, label, fieldset)
import Html.Attributes exposing (attribute, id, class)


main =
    form [ class &quot;well&quot; ]
        [ fieldset [ class &quot;form-group&quot; ]
            [ label [ attribute &quot;htmlFor&quot; &quot;title&quot; ]
                [ text &quot;Title&quot; ]
            , input [ class &quot;form-control&quot;, id &quot;title&quot; ] []
            ]
        ]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It compiles and looks exactly like it did in the React / JSX version! Now we can add functionality to this view, which will require that we finish building out a model and update function.&lt;/p&gt;

&lt;h3 id=&quot;step-2---try-to-translate-the-view-from-jsx-to-elm&quot;&gt;Step 2 - Try to translate the view from JSX to Elm&lt;/h3&gt;
&lt;p&gt;You can see the finished Elm view and the React / JSX code we replaced in this diff below. The thing is that the awesome Elm compiler will ensure that you have a model and update function before you are really able to “finish” this part of the Elm application. We will cover that next in Part #3. So while you may glance at the diff here below, know that you need to flush out the rest of the Elm Architecture before “wiring up” the view. If these diffs or snippets become confusing, please take a look at the finished Elm branch of this repo &lt;a href=&quot;https://github.com/seanhelvey/react-intro-exercise/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/viewDiff.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;viewDiff&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/viewDiff.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    A google search will lead you to many tools which can help you easily translate HTML or JSX to Elm. You can start there, and then make little tweaks as you see fit. If you have any trouble with elm-format, take a look at this &lt;a href=&quot;https://github.com/avh4/elm-format/issues/408&quot; target=&quot;_blank&quot;&gt;GitHub Issue&lt;/a&gt; for guidance.
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-3---follow-the-friendly-compiler-error-messages&quot;&gt;Step 3 - Follow the friendly compiler error messages&lt;/h3&gt;
&lt;p&gt;If you have surrendered to The Elm Architecture (step #1) and tried translating the view from JSX to Elm (step #2) then you should be able to follow the friendly compiler error messages (step #3) as they shepherd you through any confusion from the Elm guide, docs, or other code samples and blog posts you are referring to. In &lt;a href=&quot;http://www.seanhelvey.com/elm-in-react-part-3/&quot;&gt;the next post&lt;/a&gt; we will illustrate how to do this using the model and update functions along with ports to finish the “add todo” functionality.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Feb 2018 00:00:00 -0800</pubDate>
        <link>http://seanhelvey.com/elm-in-react-part-2/</link>
        <guid isPermaLink="true">http://seanhelvey.com/elm-in-react-part-2/</guid>
        
        
      </item>
    
      <item>
        <title>Elm in React Part #1</title>
        <description>&lt;p&gt;This post will expand upon &lt;a href=&quot;http://elm-lang.org/blog/how-to-use-elm-at-work&quot;&gt;Evan’s post&lt;/a&gt; describing how to use Elm with React. I’ve been using &lt;a href=&quot;https://github.com/seanhelvey/react-intro-exercise&quot;&gt;this todo list example&lt;/a&gt; to teach react for a while now (thanks &lt;a href=&quot;https://twitter.com/chadwithuhc&quot;&gt;Chad&lt;/a&gt;!) so I thought it would make sense to use the same example here. Checkout the Elm branch of the todo list repo linked above if you want to follow along. You can see the whole commit diff for this blog post &lt;a href=&quot;https://github.com/seanhelvey/react-intro-exercise/commit/2fcb2ddb9db4b3bb655312a4df1b5dc2d1c88a6d&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need to do a few things to add Elm into our react app:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Npm install &lt;code class=&quot;highlighter-rouge&quot;&gt;elm-webpack-loader&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;react-elm-components&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Update Webpack config&lt;/li&gt;
  &lt;li&gt;Install Elm packages (and add elm-stuff to .gitignore)&lt;/li&gt;
  &lt;li&gt;Replace React component with Elm&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/todo.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;todo&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/todo.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    A simple todo list
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-1---npm-install&quot;&gt;Step 1 - Npm install&lt;/h3&gt;
&lt;p&gt;Step one above doesn’t need explaining, but I’ll describe steps 2-4 in more detail.&lt;/p&gt;

&lt;h3 id=&quot;step-2---update-webpack-config&quot;&gt;Step 2 - Update Webpack config&lt;/h3&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/webpack.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;webpack&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/webpack.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Add the elm-webpack-loader and noParse lines. Note that the syntax has changed so that we must specify &quot;elm-webpack-loader&quot; rather than just &quot;elm-webpack&quot; as Evan and Richard had in their example.
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-3---install-elm-packages&quot;&gt;Step 3 - Install Elm packages&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://guide.elm-lang.org/install.html&quot;&gt;Install elm&lt;/a&gt; if you haven’t already, and then run the following two commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elm-package install elm-lang/core
elm-package install elm-lang/html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will want to add &lt;code class=&quot;highlighter-rouge&quot;&gt;elm-stuff&lt;/code&gt; to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; at this point.&lt;/p&gt;

&lt;h3 id=&quot;step-4---replace-react-component-with-elm&quot;&gt;Step 4 - Replace React component with Elm&lt;/h3&gt;
&lt;p&gt;Now we can easily replace the React component in our &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file with Elm:&lt;/p&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/app.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;app&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/app.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Replace the React component in `app.js` with Elm
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;sean-blog-image&quot;&gt;
  &lt;figure&gt;
    &lt;a href=&quot;/assets/images/seanhelvey/2018/addCard.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;addCard&quot; class=&quot; lazyloaded&quot; src=&quot;/assets/images/seanhelvey/2018/addCard.png&quot; /&gt;
    &lt;/a&gt;
  &lt;figcaption&gt;
    Our Elm file is hello world for now
  &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;We will replace the react view with Elm in &lt;a href=&quot;http://www.seanhelvey.com/elm-in-react-part-2/&quot;&gt;part #2&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Feb 2018 00:00:00 -0800</pubDate>
        <link>http://seanhelvey.com/elm-in-react-part-1/</link>
        <guid isPermaLink="true">http://seanhelvey.com/elm-in-react-part-1/</guid>
        
        
      </item>
    
      <item>
        <title>Nested React Routes in v4</title>
        <description>&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;component&lt;/code&gt; in React Router v4 works for plain old child components, but not when your child component is a nested &lt;code class=&quot;highlighter-rouge&quot;&gt;Route&lt;/code&gt;. In &lt;a href=&quot;https://github.com/seanhelvey/react-router-quickstart-nested-routes/&quot;&gt;this example&lt;/a&gt; I’ve taken the react router quickstart tweaked it to pass props into a wrapped route.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
const WrappedRoute = (props) =&amp;gt; {
  console.log(&quot;WrappedRoute props&quot;, props)
  return(
    &amp;lt;div&amp;gt;
      &amp;lt;h3&amp;gt;{props.yo()}&amp;lt;/h3&amp;gt;
      &amp;lt;Route path={`${props.match.path}/:topicId`} render={Topic}/&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

&amp;lt;WrappedRoute yo={() =&amp;gt; &quot;yo&quot;} {...props}&amp;gt;&amp;lt;/WrappedRoute&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please &lt;a href=&quot;https://twitter.com/seanhelvey&quot;&gt;Let me know&lt;/a&gt; if you disagree with this approach or have a better alternative. Hope this helps!&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Jan 2018 00:00:00 -0800</pubDate>
        <link>http://seanhelvey.com/nested-react-router-v4/</link>
        <guid isPermaLink="true">http://seanhelvey.com/nested-react-router-v4/</guid>
        
        
      </item>
    
  </channel>
</rss>
